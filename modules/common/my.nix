{
  lib,
  pkgs,
  config,
  inputs,
  ...
}: let
  inherit (pkgs.stdenv.hostPlatform) isLinux;
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.types) listOf enum str nullOr singleLineStr float;
in {
  options.my = {
    name = mkOption {
      type = str;
      default = "johnson";
      description = "The user name";
    };
    fullName = mkOption {
      type = str;
      default = "Johnson Hu";
      description = "The user full name";
    };
    email = mkOption {
      type = str;
      default = "johnson.wq.hu@gmail.com";
      description = "The user email";
    };
    shell = mkOption {
      type = enum ["bash" "fish" "zsh"];
      default = "fish";
      description = "The shell to use";
    };
    initialHashedPassword = mkOption {
      type = singleLineStr;
      # generated by `mkpasswd -m scrypt`
      default = "$y$j9T$UtvejDe22fK.4ok7ZyI1Y/$.vc/kQ3hRFbb2ntOCQQna3CcWWP6dxwtEAE1O9bWcO8";
      description = "The hashed password of the user";
    };
    home = mkOption {
      type = str;
      default = let
        user = config.my.name;
      in
        if isLinux
        then "/home/${user}"
        else "/Users/${user}";
      description = "The user home directory";
    };
    desktop = {
      enable =
        mkEnableOption "Desktop"
        // {
          default = true;
        };
      wayland = {
        enable =
          mkEnableOption "Wayland"
          // {
            default = true;
          };
      };
      xorg = {
        enable = mkEnableOption "Xorg";
      };
      default = mkOption {
        type = enum ["i3" "bspwm" "sway" "hyprland"];
        default = "hyprland";
        description = "The default window manager";
      };
    };
    security = {
      enable =
        mkEnableOption "Security"
        // {
          default = true;
        };
    };
    themes = {
      wallpaper = mkOption {
        type = str;
        default = "${inputs.wallpapers}/unorganized/nix.png";
        description = "The wallpaper of the system";
      };
      theme = mkOption {
        type = nullOr (enum ["tokyonight" "catppuccin" "auto"]);
        default = "tokyonight";
        description = "The theme to use";
      };
      transparent = {
        enable =
          mkEnableOption "Enable tmux transparent"
          // {
            default = true;
          };
      };

      # FIXME: remove this, let stylix handle this
      opacity = mkOption {
        type = float;
        default = 0.7;
        description = "The opacity of the background";
      };
      pad = {
        left = mkOption {
          type = str;
          default = "";
          description = "The left padding of status bar";
        };
        right = mkOption {
          type = str;
          default = "";
          description = "The right padding of status bar";
        };
      };
    };
    # hardware
    machine = {
      type = mkOption {
        type = enum ["workstation" "server" "laptop" "desktop" "mobile" "vm" "wsl"];
        default = "laptop";
        description = "The architecture of the system";
      };
      gpu = mkOption {
        type = nullOr (
          enum [
            "intel"
            "nvidia"
            "amd"
            "hybrid-nv"
          ]
        );
        default = null;
        description = "The GPU of the system";
      };
      cpu = mkOption {
        type = nullOr (
          enum [
            "intel"
            "amd"
            "vm-intel"
            "vm-amd"
          ]
        );
        default = null;
        description = "The CPU of the system";
      };
      monitors = mkOption {
        type = listOf str;
        default = [];
        description = ''
          this does not affect any drivers and such, it is only necessary for
          declaring things like monitors in window manager configurations
          you can avoid declaring this, but I'd rather if you did declare
        '';
      };
      isHidpi = mkEnableOption "hidpi";
      persist = mkEnableOption "persist"; # must use tmpfs for /
      minimal = mkEnableOption "Minimal";
    };
  };
}
