{
  lib,
  pkgs,
  config,
  ...
}: let
  inherit (pkgs.stdenv.hostPlatform) isLinux isDarwin;
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.types) listOf enum str nullOr singleLineStr package path coercedTo;
  inherit (config.my) desktop machine;
in {
  options.my = {
    name = mkOption {
      type = str;
      default = "johnson";
      description = "The user name";
    };
    fullName = mkOption {
      type = str;
      default = "Johnson Hu";
      description = "The user full name";
    };
    email = mkOption {
      type = str;
      default = "johnson.wq.hu@gmail.com";
      description = "The user email";
    };
    # TODO: need config bash for minimal mode
    shell = mkOption {
      type = enum ["bash" "fish" "zsh"];
      default = "fish";
      description = "The shell to use";
    };
    initialHashedPassword = mkOption {
      type = singleLineStr;
      # generated by `mkpasswd -m scrypt`
      default = "$y$j9T$UtvejDe22fK.4ok7ZyI1Y/$.vc/kQ3hRFbb2ntOCQQna3CcWWP6dxwtEAE1O9bWcO8";
      description = "The hashed password of the user";
    };
    home = mkOption {
      type = str;
      default = let
        user = config.my.name;
      in
        if isLinux
        then "/home/${user}"
        else "/Users/${user}";
      description = "The user home directory";
    };
    desktop = {
      enable =
        mkEnableOption "Desktop"
        // {
          default = true;
        };

      type = mkOption {
        type = nullOr (enum ["wayland" "xorg" "darwin"]);
        default =
          if !desktop.enable
          then null
          else if isLinux
          then "wayland"
          else "darwin";
        description = "The desktop environment type to use";
      };

      # TODO: i3 and bspwm are not supported yet
      # TODO: sway is not supported yet
      # TODO: should support niri, that's supper cool
      # TODO: should support cosmic desktop environment
      environment = mkOption {
        type = nullOr (enum ["i3" "bspwm" "sway" "Hyprland" "aerospace"]);
        default =
          if !desktop.enable
          then null
          else if isLinux
          then "Hyprland"
          else "aerospace";
        description = "The default desktop environment";
      };
    };
    security = {
      enable =
        mkEnableOption "Security"
        // {
          default = true;
        };
    };
    themes = {
      # TODO: wallpaper engine support?
      wallpaper = mkOption {
        type = nullOr (coercedTo package toString path);
        # we don't set wallpaper on macos, because it doesn't work
        default =
          if isDarwin
          then null
          else if desktop.enable
          then ./themes/walls/nix.png
          # pkgs.fetchurl {
          #   url = "https://github.com/huwqchn/wallpapers/blob/main/unorganized/nix.png";
          #   sha256 = "11qgd9k79fhpsk7x0q3cwin8i1ycf9kcd6c3si7sdck78rdhdwl8";
          # }
          else null;
        description = "The wallpaper of the system";
      };
      theme = mkOption {
        type = nullOr (enum ["tokyonight" "catppuccin" "auto"]);
        default = "tokyonight";
        description = "The theme to use";
      };
      transparent = {
        enable =
          mkEnableOption "Enable tmux transparent"
          // {
            default = true;
          };
      };
      pad = {
        left = mkOption {
          type = str;
          default = "";
          description = "The left padding of status bar";
        };
        right = mkOption {
          type = str;
          default = "";
          description = "The right padding of status bar";
        };
      };
    };
    # hardware
    machine = {
      type = mkOption {
        type = enum ["workstation" "server" "laptop" "desktop" "mobile" "vm" "wsl"];
        default = "laptop";
        description = "The architecture of the system";
      };
      gpu = mkOption {
        type = nullOr (
          enum [
            "intel"
            "nvidia"
            "amd"
            "hybrid-nv"
          ]
        );
        default = null;
        description = "The GPU of the system";
      };
      cpu = mkOption {
        type = nullOr (
          enum [
            "intel"
            "amd"
            "vm-intel"
            "vm-amd"
          ]
        );
        default = null;
        description = "The CPU of the system";
      };
      monitors = mkOption {
        type = listOf str;
        default = [];
        description = ''
          this does not affect any drivers and such, it is only necessary for
          declaring things like monitors in window manager configurations
          you can avoid declaring this, but I'd rather if you did declare
        '';
      };
      isHidpi = mkEnableOption "hidpi";
      persist = mkEnableOption "persist"; # must use tmpfs for /
      minimal = mkEnableOption "Minimal";
    };
  };

  # TODO: should refactor this, too many asserts
  config.assertions = [
    {
      assertion = desktop.type != null -> desktop.enable;
      message = "You can't use desktop.type without desktop.enable";
    }
    {
      assertion = desktop.enable -> desktop.type != null;
      message = "You can't use desktop.enable without desktop.type";
    }
    {
      assertion = desktop.environment == "i3" -> desktop.type == "xorg";
      message = "You can't use i3 desktop environment without xorg";
    }
    {
      assertion = desktop.environment == "bspwm" -> desktop.type == "xorg";
      message = "You can't use bspwm desktop environment without xorg";
    }
    {
      assertion = desktop.environment == "Hyprland" -> desktop.type == "wayland";
      message = "You can't use hyprland desktop environment without wayland";
    }
    {
      assertion = desktop.environment == "sway" -> desktop.type == "wayland";
      message = "You can't use sway desktop environment without wayland";
    }
    {
      assertion = desktop.type == "xorg" -> isLinux;
      message = "You can't use xorg on non-linux system";
    }
    {
      assertion = desktop.type == "wayland" -> isLinux;
      message = "You can't use wayland on non-linux system";
    }
    {
      assertion = desktop.type == "darwin" -> isDarwin;
      message = "You can't use darwin desktop environment on non-darwin system";
    }
    {
      assertion = desktop.environment == "aerospace" -> desktop.type == "darwin";
      message = "You can't use aerospace desktop environment without darwin";
    }
    {
      assertion =
        machine.persist
        -> (machine.type
          == "workstation"
          && machine.type == "laptop"
          && machine.type == "desktop"
          && isLinux);
    }
  ];
}
