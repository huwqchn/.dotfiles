{
  lib,
  pkgs,
  config,
  ...
}: let
  inherit (lib.my) scanPaths;
  inherit (pkgs.stdenv.hostPlatform) isLinux;
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.types) enum str singleLineStr;
  inherit (config) my;
in {
  imports = scanPaths ./.;

  options.my = {
    name = mkOption {
      type = str;
      default = "johnson";
      description = "The user name";
    };
    fullName = mkOption {
      type = str;
      default = "Johnson Hu";
      description = "The user full name";
    };
    email = mkOption {
      type = str;
      default = "johnson.wq.hu@gmail.com";
      description = "The user email";
    };
    # TODO: need config nushell
    shell = mkOption {
      type = enum ["bash" "fish" "zsh" "nushell"];
      default = "fish";
      description = "The shell to use";
    };
    initialHashedPassword = mkOption {
      type = singleLineStr;
      # generated by `mkpasswd -m scrypt`
      default = "$y$j9T$UtvejDe22fK.4ok7ZyI1Y/$.vc/kQ3hRFbb2ntOCQQna3CcWWP6dxwtEAE1O9bWcO8";
      description = "The hashed password of the user";
    };
    home = mkOption {
      type = str;
      default = let
        user = config.my.name;
      in
        if isLinux
        then "/home/${user}"
        else "/Users/${user}";
      description = "The user home directory";
    };
    security = {
      enable =
        mkEnableOption "Security"
        // {
          default = true;
        };
    };
    persistence = {
      enable = mkEnableOption "persistence"; # must use tmpfs for /
    };
    stateVersion = mkOption {
      type = str;
      default = "25.05";
      description = "The version of my system";
    };
  };

  config.assertions = [
    {
      assertion =
        config.my.persistence.enable
        -> (my.machine.type
          == "workstation"
          || my.machine.type == "laptop"
          || my.machine.type == "desktop")
        && isLinux;
    }
  ];
}
