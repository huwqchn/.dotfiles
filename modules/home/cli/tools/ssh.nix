{
  self,
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (config.my) name;
  inherit (config.home) homeDirectory;
  cfg = config.my.security;
in {
  config = mkIf cfg.enable {
    programs.ssh = {
      enable = true;
      # a private key that is used during authentication will be added to ssh-agent if it is running
      addKeysToAgent = "yes";

      # All my ssh private key are generated by `ssh-keygen -t ed25519 -a 256 -C "xxx@xxx"`
      # Config format:
      #   Host —  given the pattern used to match against the host name given on the command line.
      #   HostName — specify nickname or abbreviation for host
      #   IdentityFile — the location of your SSH key authentication file for the account.
      # Format in details:
      #   https://www.ssh.com/academy/ssh/config
      matchBlocks = {
        "*" = {
          serverAliveInterval = 180;
          serverAliveCountMax = 3;
          identityFile = [
            "${homeDirectory}/.ssh/id_ed25519"
          ];
        };
        "192.168.*" = {
          # allow to securely use local SSH agent to authenticate on the remote machine.
          # It has the same effect as adding cli option `ssh -A user@host`
          forwardAgent = true;
        };
        "ymir" = {
          hostname = "192.168.5.146";
        };
        "github.com" = {
          hostname = "github.com";
          user = "git";
          identityFile = [
            "${homeDirectory}/.ssh/id_ed25519"
          ];
          # Specifies that ssh should only use the identity file explicitly configured above
          # required to prevent sending default identity files first.
          identitiesOnly = true;
        };
      };
    };

    home = {
      packages = with pkgs; [
        connect
      ];

      file.".ssh/id_ed25519.pub".source = "${self}/secrets/${name}/id_ed25519.pub";

      persistence = {
        "/persist${config.home.homeDirectory}".directories = [".ssh"];
      };
    };

    sops.secrets.id_johnson = {
      sopsFile = "${self}/secrets/${name}/id_ed25519";
      path = "${homeDirectory}/.ssh/id_ed25519";
      mode = "0400";
      format = "binary";
    };
  };
}
